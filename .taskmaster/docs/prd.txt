# PRD — 自律型アイディエーション エージェントAI  
*Next.js × LangChain/LangGraph (MVP 版)*  
作成日: 2025‑07‑15  

---

## 1. 背景・目的
- **ミッション**: 三菱地所のケイパビリティを活かす"営業利益10 億円規模"の新事業を継続的に生み出す。  
- **課題**: 情報収集・分析・資料化に掛かる時間が長く、人的ボトルネックが大きい。  
- **解決策**: 多エージェントによる「調査 → 構想 → 評価 → ピボット → 資料化」を自律ループさせ、1 人でも高速に事業案を量産・評価できる Web アプリを構築する。  

---

## 2. 製品ビジョン
**「新規事業の頭脳を SaaS 化」**  
– クリック 1 つで "調査付き 1 ページ完結レポート" を生成し、採点フィードバックを糧に日に日に賢くなる。  

---

## 3. 想定ユーザー
| ユーザー | ニーズ | 利用シナリオ |
|----------|--------|--------------|
| 新事業担当（開発者本人） | 事業案を高速に叩き出し、部門長へ提案 | ①テーマ入力 → ②AI 生成 → ③レポート確認 → ④採点登録 |

*当面 1 ユーザー・日本語 UI 前提*  

---

## 4. MVP スコープ
| 領域 | 含める | 除外 |
|------|--------|------|
| **機能** | ・パスワードレス認証（メール Magic Link）<br>・多エージェント自律ループ<br>・A3 横 1 枚レポート（HTML）生成／閲覧<br>・評価項目ごとの採点＋コメント保存<br>・履歴一覧 | PDF/PowerPoint 出力<br>社内システム連携 |
| **非機能** | SSL, 最低限 CSRF 対策, 簡易 API コストガード | 多言語対応, 高度 RBAC |
| **インフラ** | Vercel, Supabase (Postgres+Storage) | オンプレ環境 |

---

## 5. 主要機能要件

### 5.1 エージェントループ
| 役割 | 主処理 | 出力 |
|------|--------|------|
| **Planner** | タスク分解・優先度決定 | 指示リスト |
| **Researcher** | Web 検索＆要約 (Serper.dev+BS4) | 情報カード (source URL, 抜粋) |
| **Ideator** | 課題‑解決‑BM の候補生成 | ビジネスモデル草案 |
| **Analyst** | TAM/PAM/SAM 試算・リスク分析 | 定量値＋4 象限リスク |
| **Critic** | スコアリング (市場40/シナジー30/競合20/リスク‑10) | 続行 / 撤退 |
| **Writer** | HTML レポート組版 (Jinja2) | 完成レポート |

*状態遷移*: LangGraph で実装。Critic が閾値未達なら Planner へ戻る。  
*停止条件*: ①成功レポート生成 or ②連続失敗3 回 or ③トークン上限超過。  

### 5.2 レポート仕様（A3 横想定）
| セクション | 内容 |
|------------|------|
| 1. 概要 | タイトル／30 字サマリ |
| 2. ビジネスモデル | 顧客課題・提供価値・収益構造 |
| 3. 市場規模 | TAM/PAM/SAM グラフ＋算出ロジック |
| 4. 三菱地所とのシナジー | ケイパビリティタグ×具体施策 |
| 5. リスク & 対策 | 4 象限マトリクス |
| 6. ロードマップ | 0‑3‑10 年マイルストーン |
| 7. スコアリング結果 | レーダーチャート＋総合評価 |

HTML＋Tailwind で 1 画面に収まるよう調整。  

### 5.3 採点 & 学習
- レポート閲覧画面に各評価項目（市場性・シナジー等）を 1‑5 点で採点＋自由コメント。  
- テーブル `scores` に保存 → 集計バッチで平均・分散を算出 → LangGraph Memory に反映し次ループの重みや Few‑shot 例を更新。  
- 機械学習は使わず **統計処理＋プロンプト更新** のみで自律改良。  

---

## 6. 非機能要件
| 項目 | 要件 |
|------|------|
| **性能** | 1 案生成あたり < 10 分（遅延許容） |
| **耐障害性** | LLM エラー時はリトライ 3 回 → ステータス "failed" 記録 |
| **セキュリティ** | Vercel 自動 SSL、Supabase Row‑Level Security ON |
| **観測性** | 生成トークン数・失敗回数を Supabase `logs` に保存 |
| **コスト** | 月 API 8,000 円以内。ガードレールで token cap |

---

## 7. 技術スタック
| レイヤ | 技術 |
|--------|------|
| Frontend | **Next.js 15 (App Router)**, TypeScript, shadcn/ui, TailwindCSS |
| Backend | Next.js API Routes (Edge Functions), **LangChain 0.2 + LangGraph**, *LLM Provider (env variable)* |
| Storage | **Supabase** (Postgres, Storage) |
| Auth | Supabase Auth (Passwordless Email) |
| Deploy | **Vercel** (Preview → Production) |
| DevOps | GitHub Private Repo, GitHub Actions CI |

> **LLM 選定方針**  
> - デフォルト: GPT‑4o を `.env` で指定。  
> - 重要処理（Analyst, Critic など）は `process.env.LLM_MODEL_CRITICAL` を参照し、開発中により高性能モデルへ差し替え可能。  
> - LangChain の `ChatOpenAI` など汎用ラッパーを使用し、モデル名・バージョンをコードにハードコーディングしない。 