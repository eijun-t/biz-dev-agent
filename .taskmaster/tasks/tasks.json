{
  "master": {
    "tasks": [
      {
        "id": 1,
        "title": "Initialize Next.js 15 Project with TypeScript",
        "description": "Set up a new Next.js 15 project using TypeScript, TailwindCSS, and shadcn/ui as the UI library.",
        "details": "Use the official Next.js 15 App Router template. Install TailwindCSS and shadcn/ui following their documentation. Initialize a GitHub private repository and configure GitHub Actions for CI. Prepare the project for deployment on Vercel.",
        "testStrategy": "Verify project builds and runs locally. Confirm Tailwind and shadcn/ui components render correctly. Ensure CI pipeline passes on push.",
        "priority": "high",
        "dependencies": [],
        "status": "done",
        "subtasks": [
          {
            "id": 1,
            "title": "Upgrade and Configure Next.js 15 with App Router and TypeScript",
            "description": "Update the existing project to Next.js 15, ensuring the App Router is enabled and all routes/components are compatible with the latest features. Confirm TypeScript is fully configured.",
            "dependencies": [],
            "details": "Follow the official Next.js 15 migration and setup guides. Refactor any legacy routing or incompatible code to use the /app directory and new routing conventions. Ensure tsconfig.json and next.config.ts are up to date.",
            "status": "done",
            "testStrategy": "Run the development server and verify all routes render correctly. Check for TypeScript errors and ensure type checking passes."
          },
          {
            "id": 2,
            "title": "Install and Configure TailwindCSS",
            "description": "Integrate TailwindCSS into the Next.js 15 project, ensuring styles are applied globally and utility classes are available.",
            "dependencies": [
              1
            ],
            "details": "Install TailwindCSS and its peer dependencies. Generate and configure tailwind.config.js and postcss.config.js. Add Tailwind directives to the global CSS file.",
            "status": "done",
            "testStrategy": "Verify Tailwind utility classes render as expected in sample components and pages."
          },
          {
            "id": 3,
            "title": "Integrate shadcn/ui with Required Components",
            "description": "Set up shadcn/ui in the project, importing both basic and advanced components needed for report display and scoring features.",
            "dependencies": [
              2
            ],
            "details": "Install shadcn/ui following official documentation. Add and configure base components (Button, Input, etc.) and advanced components required for report viewing and scoring (e.g., Table, Card, Progress, etc.).",
            "status": "done",
            "testStrategy": "Render each shadcn/ui component in a test page to confirm correct appearance and interactivity."
          },
          {
            "id": 4,
            "title": "Set Up GitHub Repository and Configure CI with GitHub Actions",
            "description": "Initialize a private GitHub repository and set up GitHub Actions for CI, including build, test, lint, TypeScript type check, ESLint, and Prettier.",
            "dependencies": [
              3
            ],
            "details": "Push the project to a new private GitHub repository. Create a GitHub Actions workflow file that runs on push/pull request, executing build, test, lint, type check, and formatting checks.",
            "status": "done",
            "testStrategy": "Push a commit and verify all CI checks pass in GitHub Actions."
          },
          {
            "id": 5,
            "title": "Prepare for Vercel Deployment and Install Core AI Libraries",
            "description": "Configure the project for Vercel deployment, including environment variables, vercel.json, and preview deployments. Install LangChain, LangGraph, and other required AI libraries for future tasks.",
            "dependencies": [
              4
            ],
            "details": "Set up vercel.json and environment variable management. Enable preview deployments. Install LangChain, LangGraph, and any other foundational AI libraries needed for downstream agent workflows.",
            "status": "done",
            "testStrategy": "Deploy to Vercel and confirm successful build and preview deployment. Verify environment variables are accessible. Check that AI libraries are installed and importable."
          }
        ]
      },
      {
        "id": 2,
        "title": "Configure Supabase Integration (Auth, Postgres, Storage)",
        "description": "Integrate Supabase for authentication, database, and storage. Enable passwordless email authentication and set up required tables.",
        "details": "Connect Supabase to the Next.js project. Enable Row-Level Security (RLS). Create tables: 'reports', 'scores', 'logs'. Configure Supabase Auth for passwordless email (Magic Link).",
        "testStrategy": "Test user signup/login via Magic Link. Validate RLS by attempting unauthorized access. Confirm data can be read/written to all tables.",
        "priority": "high",
        "dependencies": [
          1
        ],
        "status": "done",
        "subtasks": [
          {
            "id": 1,
            "title": "Review and Update Supabase Project Settings",
            "description": "Audit the existing Supabase project configuration and update only the necessary settings for integration with the Next.js project, ensuring no redundant changes.",
            "dependencies": [],
            "details": "Leverage the current Supabase setup, making minimal adjustments to connect with the Next.js app and enable required features.",
            "status": "done",
            "testStrategy": "Verify Supabase project connectivity from the Next.js app and confirm that existing settings remain functional."
          },
          {
            "id": 2,
            "title": "Design and Create Required Database Tables",
            "description": "Define and create the 'reports', 'scores', and 'logs' tables in Supabase, using placeholder columns where detailed schema is pending.",
            "dependencies": [
              1
            ],
            "details": "Implement initial table structures: 'reports' (columns TBD), 'scores' (1-5 score and comment), 'logs' (fields for AI agent logs, API usage, errors, performance).",
            "status": "done",
            "testStrategy": "Check that all tables are created and accessible via Supabase Table Editor and that test data can be inserted and queried."
          },
          {
            "id": 3,
            "title": "Enable and Configure Row-Level Security (RLS)",
            "description": "Activate RLS on the new tables with simple, permissive policies to start, ensuring basic data protection.",
            "dependencies": [
              2
            ],
            "details": "Enable RLS for each table and add initial policies (e.g., allow authenticated users to read/write their own data).",
            "status": "done",
            "testStrategy": "Attempt unauthorized and authorized access to each table to confirm RLS is enforced as intended."
          },
          {
            "id": 4,
            "title": "Configure Supabase Storage (Initial Setup Only)",
            "description": "Set up Supabase Storage buckets as placeholders for future use, without detailed configuration or integration at this stage.",
            "dependencies": [
              1
            ],
            "details": "Create storage buckets in Supabase for later use, ensuring they are ready for future file uploads.",
            "status": "done",
            "testStrategy": "Confirm storage buckets exist in the Supabase dashboard and are accessible for future configuration."
          },
          {
            "id": 5,
            "title": "Integrate Supabase Auth and Environment Variables",
            "description": "Ensure passwordless email authentication (Magic Link) is enabled and connect the Next.js app using environment variables managed via .env files.",
            "dependencies": [
              1
            ],
            "details": "Verify that passwordless auth is active in Supabase, and configure the Next.js app to use Supabase credentials and endpoints from .env files.",
            "status": "done",
            "testStrategy": "Test user signup/login via Magic Link and confirm that environment variables are loaded correctly in both development and production."
          }
        ]
      },
      {
        "id": 3,
        "title": "Implement Passwordless Authentication Flow",
        "description": "Build frontend and backend logic for standard email/password authentication using Supabase Auth.",
        "status": "cancelled",
        "dependencies": [
          2
        ],
        "priority": "high",
        "details": "Create login and signup UI with shadcn/ui, supporting email and password fields. Signup must include email, password, and password confirmation. Use the Supabase client SDK to handle email/password authentication requests and session management. Leverage existing authentication-related files. Protect all app routes except login/signup, ensuring only authenticated users can access protected content.",
        "testStrategy": "Attempt login and signup with valid and invalid email/password combinations, including mismatched password confirmation. Confirm session persistence and route protection. Verify that only authenticated users can access protected routes.",
        "subtasks": []
      },
      {
        "id": 4,
        "title": "Design Database Schema for Reports, Scores, and Logs",
        "description": "Define and migrate the schema for 'reports', 'scores', and 'logs' tables in Supabase Postgres.",
        "details": "Design 'reports' to store generated report data, 'scores' for user evaluations (including per-criterion scores and comments), and 'logs' for observability (token usage, failures). Use SQL migrations or Supabase dashboard.",
        "testStrategy": "Insert, update, and query sample data for each table. Validate schema constraints and relationships.",
        "priority": "high",
        "dependencies": [
          2
        ],
        "status": "pending",
        "subtasks": [
          {
            "id": 1,
            "title": "Design reports table schema",
            "description": "Define the structure of the 'reports' table with required columns and report content fields, considering storage format (HTML, JSONB, or both).",
            "dependencies": [],
            "details": "Include columns: id (primary key), user_id (foreign key to auth.users), title, created_at, updated_at, status. Store report content fields (e.g., idea title, target, challenges, monetization, TAM, competitors, Mitsubishi Jisho's capability, risks, roadmap) in either HTML, JSONB, or both, based on technical assessment. Ensure the schema supports efficient querying and future extensibility.",
            "status": "pending",
            "testStrategy": "Insert sample reports with varied content formats. Verify all columns and content fields are correctly stored and retrievable."
          },
          {
            "id": 2,
            "title": "Design scores table schema",
            "description": "Define the 'scores' table to store user evaluations linked 1:1 to reports, with flexible criteria for future changes.",
            "dependencies": [
              1
            ],
            "details": "Include columns: id (primary key), report_id (foreign key to reports, enforcing 1:1 relationship), user_id (foreign key to auth.users), and fields for each evaluation criterion (market size/competition, Mitsubishi Jisho's advantage, target/problem validity). Allow for comments and potential future criterion additions. Use appropriate data types for scores and text.",
            "status": "pending",
            "testStrategy": "Insert scores for multiple reports. Validate 1:1 relationship enforcement. Test updates to criteria and comments."
          },
          {
            "id": 3,
            "title": "Design logs table schema",
            "description": "Define a minimal, efficient 'logs' table for observability data such as API usage, errors, performance, and agent execution logs.",
            "dependencies": [],
            "details": "Include columns: id (primary key), user_id (foreign key to auth.users), timestamp, event_type (e.g., api_usage, error, performance, agent_execution), and details (JSONB for flexible log payload). Optimize for small-scale observability with fast writes and simple queries.",
            "status": "pending",
            "testStrategy": "Log sample events of each type. Verify logs are correctly stored and queryable by user and event type."
          },
          {
            "id": 4,
            "title": "Define table relationships and constraints",
            "description": "Establish and enforce relationships between tables, especially the 1:1 link between reports and scores, and user references.",
            "dependencies": [
              1,
              2,
              3
            ],
            "details": "Set up foreign key constraints: reports.user_id → auth.users.id, scores.report_id → reports.id (unique), scores.user_id → auth.users.id, logs.user_id → auth.users.id. Ensure referential integrity and consider cascade rules for updates/deletes. Document relationships clearly in the schema.",
            "status": "pending",
            "testStrategy": "Attempt to insert orphaned records to test constraint enforcement. Validate cascade behavior if applicable."
          },
          {
            "id": 5,
            "title": "Implement and version schema migrations",
            "description": "Create and apply SQL migration scripts to deploy the schema to Supabase Postgres, using a versioned, declarative approach.",
            "dependencies": [
              1,
              2,
              3,
              4
            ],
            "details": "Write idempotent SQL migration files for each table and relationship. Use a declarative schema tool or Supabase CLI for version control and easy rebasing[2]. Test migrations in a staging environment before production. Document the migration process for team reproducibility.",
            "status": "pending",
            "testStrategy": "Apply migrations to a fresh database. Verify tables, columns, constraints, and relationships are correctly created. Roll back and reapply migrations to test idempotency."
          }
        ]
      },
      {
        "id": 5,
        "title": "Set Up LangGraph.js Foundation and Next.js API Integration",
        "description": "Initialize LangGraph.js within the Next.js API layer, creating the foundation for multi-agent orchestration with environment-based LLM model selection.",
        "details": "Install LangGraph.js and configure it to work with Next.js API routes. Set up environment variable handling for LLM model selection (OpenAI, Anthropic, etc.). Create the basic API structure for agent node integration. Implement shared state management and agent communication interfaces. Set up error handling foundation and logging infrastructure.",
        "testStrategy": "Verify Next.js API can initialize LangGraph workflows. Test environment variable-based LLM selection. Confirm shared state management works correctly.",
        "priority": "high",
        "dependencies": [
          1,
          2,
          4
        ],
        "status": "pending",
        "subtasks": [
          {
            "id": 1,
            "title": "Install and Configure LangGraph.js in Next.js API Layer",
            "description": "Install the latest @langchain/langgraph package and set up its initial configuration within the Next.js API routes to enable multi-agent orchestration.",
            "dependencies": [],
            "details": "Add @langchain/langgraph as a dependency. Initialize LangGraph.js in a dedicated module (e.g., /lib/langgraph.ts). Ensure compatibility with Next.js API route handlers.",
            "status": "pending",
            "testStrategy": "Verify that LangGraph.js can be imported and initialized without errors in a basic API route."
          },
          {
            "id": 2,
            "title": "Implement Environment-Based LLM Model Selection",
            "description": "Set up environment variable handling to select the LLM provider and model (OpenAI GPT-4o) dynamically within the API layer.",
            "dependencies": [
              1
            ],
            "details": "Read LLM provider and model configuration from environment variables. Default to OpenAI GPT-4o for development. Ensure the configuration can be easily switched for future providers.",
            "status": "pending",
            "testStrategy": "Change environment variables and confirm the correct model/provider is selected during API execution."
          },
          {
            "id": 3,
            "title": "Create Basic API Structure for Agent Node Integration",
            "description": "Design and implement the foundational API endpoints for agent orchestration, including POST /api/agents/run and GET /api/agents/status, using JSON request/response formats.",
            "dependencies": [
              2
            ],
            "details": "Define API route handlers in Next.js for running agent workflows and checking status. Ensure endpoints accept and return JSON. Prepare for future agent node integration.",
            "status": "pending",
            "testStrategy": "Send test requests to each endpoint and verify correct structure and response format."
          },
          {
            "id": 4,
            "title": "Implement In-Memory Shared State and Session Management",
            "description": "Develop a shared state management system using in-memory storage and basic session handling to enable agent communication and workflow continuity.",
            "dependencies": [
              3
            ],
            "details": "Use a JavaScript object or Map for in-memory state. Implement session tracking (e.g., via session IDs in requests). Prepare interfaces for agent nodes to read/write shared state.",
            "status": "pending",
            "testStrategy": "Run multiple workflow sessions and confirm state is isolated and persists correctly per session."
          },
          {
            "id": 5,
            "title": "Set Up Basic Error Handling and Logging Infrastructure",
            "description": "Establish foundational error handling with retry logic and implement logging for API requests, agent execution, and errors.",
            "dependencies": [
              4
            ],
            "details": "Add try/catch blocks to API handlers and agent execution logic. Implement a simple retry mechanism for transient errors. Log key events and errors to the console or a logging service.",
            "status": "pending",
            "testStrategy": "Simulate errors and verify retries and logs are triggered as expected."
          }
        ]
      },
      {
        "id": 6,
        "title": "Implement Ideation Research Phase Agents",
        "description": "Develop Planner and Researcher agents for the initial ideation research phase, enabling dynamic investigation planning and information gathering.",
        "details": "Create Planner agent for dynamic research planning based on user input (from broad to specific). Implement Researcher agent with Serper.dev + BS4 integration for web search and summarization. Focus on: startup trends, industry challenges, technology developments, investment patterns. Enable autonomous decision-making for additional research rounds.",
        "testStrategy": "Test Planner with various input types (broad vs specific). Verify Researcher can gather and summarize relevant information. Validate autonomous re-planning capability.",
        "priority": "high",
        "dependencies": [
          10
        ],
        "status": "pending",
        "subtasks": [
          {
            "id": 1,
            "title": "Design and Implement Planner Agent for Dynamic Research Planning",
            "description": "Develop a Planner agent capable of initiating research planning with or without user input, generating 20-30 balanced research items across specified categories using pre-prepared keyword combinations.",
            "dependencies": [],
            "details": "Ensure the Planner agent can start from a blank state, generate diverse and balanced research topics (startup trends, industry challenges, technology developments, investment patterns), and exclude Mitsubishi Estate strengths from search queries.",
            "status": "pending",
            "testStrategy": "Test Planner agent with both no input and various user inputs; verify generation of 20-30 balanced research items and correct keyword usage."
          },
          {
            "id": 2,
            "title": "Integrate Serper.dev API and BeautifulSoup4 for Researcher Agent",
            "description": "Implement the Researcher agent to perform web searches using Serper.dev API (Japanese for domestic, English for overseas cases) and scrape detailed information with BeautifulSoup4 as needed.",
            "dependencies": [
              1
            ],
            "details": "Configure API keys, handle language selection, and determine when to use BS4 for deeper scraping. Ensure structured JSON output for all gathered data.",
            "status": "pending",
            "testStrategy": "Verify Researcher agent can retrieve and parse relevant information in both Japanese and English, and outputs structured JSON summaries."
          },
          {
            "id": 3,
            "title": "Develop Autonomous Decision-Making System for Research Iteration",
            "description": "Create a system that autonomously evaluates research sufficiency, determines Mitsubishi Estate fit, business scale potential, and decides whether to trigger additional research or proceed to ideation.",
            "dependencies": [
              2
            ],
            "details": "Implement criteria for sufficiency (information volume, business scale, fit to urban development/real estate/customer network), and automate the feedback loop between Researcher and Planner or progression to Ideator.",
            "status": "pending",
            "testStrategy": "Simulate scenarios with varying research completeness and business fit; confirm correct autonomous routing (re-research or ideation)."
          },
          {
            "id": 4,
            "title": "Implement Parallel Processing and Performance Optimization",
            "description": "Enable parallel execution of research tasks to accelerate information gathering, ensuring total processing time for the phase is within 2 minutes.",
            "dependencies": [
              2
            ],
            "details": "Utilize concurrency frameworks to run multiple research queries simultaneously; monitor and optimize for speed and resource usage.",
            "status": "pending",
            "testStrategy": "Benchmark research phase with full workload; confirm completion within 2 minutes and validate correctness of parallelized outputs."
          },
          {
            "id": 5,
            "title": "Add Robust Error Handling and Retry Mechanisms",
            "description": "Implement comprehensive error handling and automatic retry logic for both Planner and Researcher agents to ensure reliability and resilience.",
            "dependencies": [
              1,
              2
            ],
            "details": "Detect and handle API failures, scraping errors, and data inconsistencies; implement configurable retry policies and fallback strategies.",
            "status": "pending",
            "testStrategy": "Induce various error scenarios (API failure, network issues, parsing errors) and verify system recovers gracefully with successful retries or appropriate fallback."
          }
        ]
      },
      {
        "id": 7,
        "title": "Implement Ideation and Initial Evaluation Agents",
        "description": "Create Ideator and Critic agents for business idea generation and initial quality assessment, with autonomous iteration capability.",
        "details": "Develop Ideator agent for business model generation based on research findings. Create Critic agent for initial idea evaluation and quality scoring. Implement autonomous iteration - Critic can request Ideator to refine ideas or Researcher to gather more information. Define evaluation criteria and scoring thresholds for progression to next phase.",
        "testStrategy": "Generate multiple business ideas from research data. Test Critic evaluation accuracy and consistency. Verify autonomous iteration and quality improvement loops.",
        "priority": "high",
        "dependencies": [
          6
        ],
        "status": "pending",
        "subtasks": [
          {
            "id": 1,
            "title": "Design Ideator Agent Specification",
            "description": "Define the Ideator agent's structure, including required outputs (title, target, problem, solution, business model), number of ideas to generate, and alignment criteria with Mitsubishi Estate's strengths and existing businesses.",
            "dependencies": [],
            "details": "Specify the JSON output format, ensure the agent generates 3-5 business ideas, and incorporate evaluation for acceleration potential via Mitsubishi Estate's assets.",
            "status": "pending",
            "testStrategy": "Verify that the Ideator agent consistently produces 3-5 ideas in the correct format, each including all required fields and explicit consideration of Mitsubishi Estate fit."
          },
          {
            "id": 2,
            "title": "Develop Critic Agent Evaluation Logic",
            "description": "Implement the Critic agent to evaluate business ideas using defined criteria: market size/growth, feasibility/technical difficulty, strategic fit, competitive advantage, and profitability/ROI.",
            "dependencies": [
              1
            ],
            "details": "Establish a 0-100 scoring system, set a 70-point threshold for progression, and enable selection of the top idea from multiple candidates.",
            "status": "pending",
            "testStrategy": "Test Critic agent with sample ideas to ensure accurate, consistent scoring and correct selection of the highest-scoring idea."
          },
          {
            "id": 3,
            "title": "Implement Autonomous Iteration Workflow",
            "description": "Enable the Critic agent to autonomously request idea refinement from the Ideator agent if all ideas score below 70, with a maximum of three iterations.",
            "dependencies": [
              2
            ],
            "details": "Design the workflow to track iteration count, enforce the three-attempt limit, and terminate the process if no idea meets the threshold after three rounds.",
            "status": "pending",
            "testStrategy": "Simulate low-scoring idea scenarios to confirm the system requests improvements up to three times and terminates correctly if the threshold is not met."
          },
          {
            "id": 4,
            "title": "Integrate Agents with LangGraph.js and Asynchronous Processing",
            "description": "Implement state management and asynchronous communication between Ideator and Critic agents using LangGraph.js, ensuring robust error handling and retry logic.",
            "dependencies": [
              3
            ],
            "details": "Set up LangGraph.js for agent orchestration, support asynchronous calls, and implement error handling to retry failed operations as needed.",
            "status": "pending",
            "testStrategy": "Test agent interactions under normal and error conditions, verifying correct state transitions, retries, and overall system stability."
          },
          {
            "id": 5,
            "title": "Validate End-to-End Performance and Output Compliance",
            "description": "Ensure the entire ideation and evaluation process completes within 10 minutes and outputs results in the specified JSON structure.",
            "dependencies": [
              4
            ],
            "details": "Measure total processing time from initial idea generation to final output, and validate that all outputs strictly match the required JSON schema.",
            "status": "pending",
            "testStrategy": "Run full workflow tests with timing checks and schema validation to confirm compliance with performance and output requirements."
          }
        ]
      },
      {
        "id": 8,
        "title": "Implement Detailed Analysis and Market Research Agents",
        "description": "Develop Analyst and enhanced Researcher capabilities for deep-dive market analysis, competitive assessment, and feasibility evaluation.",
        "details": "Create Analyst agent for market sizing (TAM), competitive analysis, risk assessment, and financial projections. Enhance Researcher agent for targeted market research based on selected ideas. Implement autonomous coordination - Analyst can request specific research from Researcher. Include integration with financial data sources and calculation tools.",
        "testStrategy": "Analyze market size and competition for various business ideas. Test Analyst-Researcher coordination for targeted research. Verify accuracy of financial projections and risk assessments.",
        "priority": "high",
        "dependencies": [
          7
        ],
        "status": "pending",
        "subtasks": [
          {
            "id": 1,
            "title": "Design Analyst Agent for Market Sizing and Financial Projections",
            "description": "Develop the Analyst agent to perform comprehensive market sizing (TAM/SAM/SOM) using both top-down and bottom-up approaches, and generate high-level financial projections based on market data and assumptions.",
            "dependencies": [],
            "details": "Implement logic for TAM/SAM/SOM calculation, integrating statistical sources and fallback estimation methods. Include modules for revenue, profit margin, investment, and payback period projections. Ensure adaptability for various industries and business models.",
            "status": "pending",
            "testStrategy": "Validate market sizing and financial outputs against known industry benchmarks and sample business cases. Test both calculation approaches for accuracy and consistency."
          },
          {
            "id": 2,
            "title": "Develop Analyst Agent for Competitive and Risk Analysis",
            "description": "Enable the Analyst agent to conduct detailed competitive landscape assessments and multi-dimensional risk evaluations, including market, technology, competition, and financial risks.",
            "dependencies": [
              1
            ],
            "details": "Implement modules to analyze direct and indirect competitors, their strengths/weaknesses, pricing, customer base, and technology. Integrate risk assessment frameworks covering demand, regulation, technical feasibility, new entrants, and investment risks.",
            "status": "pending",
            "testStrategy": "Test competitive and risk analysis outputs using real-world company data and hypothetical scenarios. Ensure comprehensive coverage and actionable insights."
          },
          {
            "id": 3,
            "title": "Enhance Researcher Agent for Targeted Market and Industry Research",
            "description": "Upgrade the Researcher agent to perform deep-dive research on selected industries, competitors, customer needs, and regulatory requirements, leveraging expanded data sources.",
            "dependencies": [
              2
            ],
            "details": "Integrate access to financial databases, industry reports, patent/technology sources, and regulatory information. Enable focused research tasks based on Analyst requests, supporting structured data extraction and summarization.",
            "status": "pending",
            "testStrategy": "Test targeted research tasks for accuracy, relevance, and completeness across multiple industry verticals and information types."
          },
          {
            "id": 4,
            "title": "Implement Autonomous Analyst-Researcher Coordination",
            "description": "Establish autonomous workflows where the Analyst agent can trigger specific research requests to the Researcher agent when data gaps or validation needs are detected.",
            "dependencies": [
              3
            ],
            "details": "Define protocols for research request generation, task handoff, and result integration. Ensure requests are granular (e.g., market size for X, competitor Y's pricing, segment Z's needs) and responses are structured for downstream analysis.",
            "status": "pending",
            "testStrategy": "Simulate scenarios with incomplete data and verify that the Analyst agent autonomously requests and incorporates targeted research from the Researcher agent."
          },
          {
            "id": 5,
            "title": "Integrate Financial Data Sources and Calculation Tools with Error Handling",
            "description": "Connect both agents to external financial/statistical data sources and implement robust calculation modules with error handling and retry logic.",
            "dependencies": [
              4
            ],
            "details": "Integrate APIs and databases for real-time financial and market data. Implement calculation engines for market sizing and projections. Add error detection, handling, and retry mechanisms to ensure reliability.",
            "status": "pending",
            "testStrategy": "Test data integration and calculation modules under normal and failure conditions. Verify error handling and recovery processes maintain data integrity and workflow continuity."
          }
        ]
      },
      {
        "id": 9,
        "title": "Implement Report Generation and Quality Assurance System",
        "description": "Create Writer agent for comprehensive report generation and enhanced Critic for final quality assurance, with autonomous revision capabilities.",
        "details": "Develop Writer agent for HTML report generation using structured templates. Include all required sections: idea summary, target market, competitive landscape, financial projections, risks, implementation roadmap. Enhance Critic agent for final quality assessment and revision requests. Implement autonomous revision loops - Writer can request additional research or analysis if needed.",
        "testStrategy": "Generate complete reports from analysis data. Test report quality and completeness. Verify autonomous revision and improvement processes.",
        "priority": "high",
        "dependencies": [
          8
        ],
        "status": "pending",
        "subtasks": [
          {
            "id": 1,
            "title": "Design Writer Agent UI and Template Structure",
            "description": "Design the Writer agent's user interface with a modern gradient background and tab-based layout, implementing 7 fixed tabs as specified. Define the HTML/React template structure for detailed report content in each tab.",
            "dependencies": [],
            "details": "Ensure the UI uses Next.js 15, React, TailwindCSS, and shadcn/ui components. Each tab must correspond to a required report section and support detailed content entry. Include a right sidebar for chatbot Q&A based on report content.",
            "status": "pending",
            "testStrategy": "Verify UI renders all tabs with correct styling and structure. Confirm sidebar chatbot is present and responsive."
          },
          {
            "id": 2,
            "title": "Implement HTML Report Generation Logic",
            "description": "Develop the Writer agent's logic to generate structured HTML reports using the defined templates, populating all required sections with data.",
            "dependencies": [
              1
            ],
            "details": "Ensure each tab's content is rendered in HTML/React format only. Integrate template logic to support dynamic data population and formatting. Support saving and loading reports from Supabase.",
            "status": "pending",
            "testStrategy": "Generate sample reports and verify correct HTML structure, data population, and template adherence."
          },
          {
            "id": 3,
            "title": "Integrate Chatbot Functionality for Report Q&A",
            "description": "Implement a chatbot in the right sidebar that answers questions based on the current report's content.",
            "dependencies": [
              1
            ],
            "details": "Ensure the chatbot can access and reference all report sections. UI must remain responsive and context-aware.",
            "status": "pending",
            "testStrategy": "Test chatbot with various queries to confirm accurate, context-based responses."
          },
          {
            "id": 4,
            "title": "Develop Enhanced Critic Agent for Quality Assessment",
            "description": "Create the Critic agent to evaluate reports for logical consistency and actionable specificity, scoring each report and providing revision requests if below the 80-point threshold.",
            "dependencies": [
              2
            ],
            "details": "Implement evaluation logic focusing on logical coherence and concrete details. Critic must provide actionable feedback and trigger revision requests as needed.",
            "status": "pending",
            "testStrategy": "Submit reports of varying quality and verify Critic's scoring accuracy and feedback relevance."
          },
          {
            "id": 5,
            "title": "Implement Autonomous Revision and Research Loop",
            "description": "Enable the Writer agent to autonomously request additional research or analysis and revise reports up to two times based on Critic feedback.",
            "dependencies": [
              4
            ],
            "details": "Track revision count and enforce a maximum of two cycles. Ensure Writer can trigger targeted research or analysis requests and update the report accordingly.",
            "status": "pending",
            "testStrategy": "Test revision loop with reports requiring multiple improvements, confirming correct handling and stopping after two cycles."
          },
          {
            "id": 6,
            "title": "Optimize Performance, Error Handling, and Data Management",
            "description": "Optimize report generation and QA processes for speed and reliability. Implement robust error handling and fallback logic for missing data. Ensure all reports are saved and managed in Supabase.",
            "dependencies": [
              2,
              5
            ],
            "details": "Balance processing time and output quality. Handle incomplete data gracefully. Confirm all report data is stored and retrievable from Supabase in HTML/React format.",
            "status": "pending",
            "testStrategy": "Simulate slow or incomplete data scenarios, verify error handling, and confirm data persistence and retrieval."
          }
        ]
      },
      {
        "id": 10,
        "title": "Integrate Multi-Agent Orchestration and Workflow Management",
        "description": "Implement the complete multi-agent workflow orchestration system with dynamic routing, state management, and autonomous agent coordination.",
        "details": "Integrate all agents into a cohesive workflow system. Implement dynamic routing logic allowing agents to autonomously decide next actions and coordinate with other agents. Create robust state management for information sharing across agents. Implement workflow progression logic (ideation research → ideation → evaluation → detailed research → report generation). Add comprehensive error handling and recovery mechanisms.",
        "testStrategy": "Execute end-to-end workflows with various input scenarios. Test autonomous agent coordination and decision-making. Verify workflow progression and error recovery.",
        "priority": "high",
        "dependencies": [
          9
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 11,
        "title": "Integrate LLM Provider and Model Selection Logic",
        "description": "Connect to OpenAI GPT-4o (or other LLMs) via environment variables. Ensure critical agents use the correct model as specified in env config.",
        "details": "Use LangChain's ChatOpenAI wrapper. Read model names from .env (LLM_MODEL_CRITICAL for Analyst, Critic; default for others). Avoid hardcoding model names. Allow easy switching for development/testing.",
        "testStrategy": "Switch model names in .env and verify correct models are used for each agent. Test fallback to default if critical model is not set.",
        "priority": "medium",
        "dependencies": [
          5
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 12,
        "title": "Implement HTML Report Generation (A3 Landscape)",
        "description": "Generate a single-page HTML report per PRD spec, styled with TailwindCSS, using Jinja2 templating via LangChain.",
        "details": "Define Jinja2 template for all report sections (summary, business model, market size, synergy, risk, roadmap, scoring). Ensure layout fits A3 landscape and is responsive. Render in-browser using Next.js.",
        "testStrategy": "Generate reports with varied data. Visually inspect layout and content. Confirm all sections render as specified.",
        "priority": "high",
        "dependencies": [
          5
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 13,
        "title": "Build Report Generation and Viewing UI",
        "description": "Create frontend flows for theme input, report generation trigger, and report viewing. Display reports in a single-page HTML view.",
        "details": "Use shadcn/ui components for input forms and report display. Implement loading/progress indicators. Fetch and render generated reports from Supabase.",
        "testStrategy": "Submit theme, trigger generation, and view resulting report. Test with multiple reports and edge cases (long/short content).",
        "priority": "high",
        "dependencies": [
          12
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 14,
        "title": "Implement Scoring and Feedback Mechanism",
        "description": "Enable users to score reports on each evaluation criterion (1-5) and leave comments. Save to 'scores' table and update agent memory for future loops.",
        "details": "Add scoring UI to report view. On submit, store scores/comments in Supabase. Implement backend batch job to compute averages/variance and update LangGraph memory/prompts (no ML, just statistical updates).",
        "testStrategy": "Submit scores/comments, verify persistence. Check that new agent runs reflect updated prompt examples/statistics.",
        "priority": "medium",
        "dependencies": [
          4,
          13
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 15,
        "title": "Implement Report and Score History Listing",
        "description": "Provide a UI for users to view their past reports and associated scores/comments.",
        "details": "Create a history page listing all reports with summary info and links to full view. Display associated scores and comments. Use Supabase queries for data retrieval.",
        "testStrategy": "Generate multiple reports, score them, and verify all appear in history with correct data.",
        "priority": "medium",
        "dependencies": [
          13,
          14
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 16,
        "title": "Add Observability, Error Handling, and Cost Guardrails",
        "description": "Log token usage and failure counts to 'logs' table. Implement retry logic for LLM errors (up to 3 times) and enforce monthly API token cap.",
        "details": "Instrument agent workflow to log token counts and errors. On LLM failure, retry up to 3 times, then mark as 'failed'. Implement backend check to halt generation if token cap is exceeded.",
        "testStrategy": "Simulate LLM errors and high token usage. Verify retries, logging, and cap enforcement work as intended.",
        "priority": "medium",
        "dependencies": [
          5,
          4
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 17,
        "title": "Production Deployment and Security Hardening",
        "description": "Deploy to Vercel with SSL. Enable CSRF protection and verify Supabase RLS. Finalize environment variables and secrets management.",
        "details": "Configure Vercel deployment pipeline. Ensure all endpoints are protected against CSRF. Double-check Supabase RLS and environment variable usage. Document deployment steps.",
        "testStrategy": "Run security scans, attempt unauthorized access, and verify SSL/CSRF protections. Confirm production deployment is stable.",
        "priority": "high",
        "dependencies": [
          1,
          16
        ],
        "status": "pending",
        "subtasks": []
      }
    ],
    "metadata": {
      "created": "2025-07-15T14:25:14.652Z",
      "updated": "2025-07-18T11:25:22.299Z",
      "description": "Tasks for master context"
    }
  }
}